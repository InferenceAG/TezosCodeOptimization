parameter (nat %minTen);
storage   nat;
code
  {
    # Private variable: myfunc # pair @parameter @storage
    LAMBDA
      (pair nat nat)
      (pair nat nat)
      {
        UNPAIR;     # nat : nat
        # sp.result((((((((((_x0 + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) + 1) # nat : nat
        PUSH nat 1; # nat : nat : nat
        DUP;        # nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        DUP;        # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        DIG 10;     # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat : nat
        ADD;        # nat : nat : nat : nat
        ADD;        # nat : nat : nat
        ADD;        # nat : nat
        PAIR;       # pair nat nat
      }; # lambda (pair nat nat) (pair nat nat) : pair @parameter @storage
    SWAP;       # pair @parameter @storage : lambda (pair nat nat) (pair nat nat)
    UNPAIR;     # @parameter : @storage : lambda (pair nat nat) (pair nat nat)
    # == minTen ==
    # compute_lambda-opt_22 = sp.local("compute_lambda-opt_22", self.myfunc(params)) # @parameter : @storage : lambda (pair nat nat) (pair nat nat)
    DUP 3;      # lambda (pair nat nat) (pair nat nat) : @parameter : @storage : lambda (pair nat nat) (pair nat nat)
    DUG 2;      # @parameter : @storage : lambda (pair nat nat) (pair nat nat) : lambda (pair nat nat) (pair nat nat)
    PAIR;       # pair @parameter @storage : lambda (pair nat nat) (pair nat nat) : lambda (pair nat nat) (pair nat nat)
    EXEC;       # pair nat nat : lambda (pair nat nat) (pair nat nat)
    UNPAIR;     # nat : nat : lambda (pair nat nat) (pair nat nat)
    # temp = sp.local("temp", compute_lambda-opt_22.value)
    # compute_lambda-opt_23 = sp.local("compute_lambda-opt_23", self.myfunc(temp.value)) # nat : nat : lambda (pair nat nat) (pair nat nat)
    PAIR;       # pair nat nat : lambda (pair nat nat) (pair nat nat)
    EXEC;       # pair nat nat
    CAR;        # nat
    # temp.value = compute_lambda-opt_23.value
    # self.data.store = temp.value # nat
    NIL operation; # list operation : nat
    PAIR;       # pair (list operation) nat
  };